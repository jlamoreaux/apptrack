/**
 * Utility functions for exporting job fit analysis results
 * Handles copying to clipboard and PDF generation
 */

import type { JobFitAnalysisResult } from "@/types/ai-analysis";
import { jsPDF } from "jspdf";
import html2canvas from "html2canvas";

/**
 * Formats job fit analysis data for human-readable text export
 */
export function formatAnalysisForExport(
  analysis: JobFitAnalysisResult
): string {
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  return `JOB FIT ANALYSIS REPORT
Generated: ${formatDate(analysis.generatedAt)}

OVERALL SCORE: ${analysis.overallScore}% - ${analysis.scoreLabel}

MATCH BREAKDOWN:
• Skills Match: ${analysis.matchDetails?.skillsMatch || 0}%
• Experience Match: ${analysis.matchDetails?.experienceMatch || 0}%
• Education Match: ${analysis.matchDetails?.educationMatch || 0}%

STRENGTHS:
${
  analysis.strengths?.map((strength) => `• ${strength}`).join("\n") ||
  "• No strengths data available"
}

AREAS TO ADDRESS:
${
  analysis.weaknesses?.map((weakness) => `• ${weakness}`).join("\n") ||
  "• No areas for improvement data available"
}

KEY REQUIREMENTS:
${
  analysis.keyRequirements?.map((req) => `• ${req}`).join("\n") ||
  "• No key requirements data available"
}

RECOMMENDATIONS:
${
  analysis.recommendations?.map((rec) => `• ${rec}`).join("\n") ||
  "• No recommendations data available"
}

---
This report was generated by AppTrack AI Coach
`;
}

/**
 * Formats analysis data for rich text (HTML) export with styling
 */
export function formatAnalysisForRichText(
  analysis: JobFitAnalysisResult
): string {
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const scoreColor =
    analysis.overallScore >= 85
      ? "#059669"
      : analysis.overallScore >= 75
      ? "#2563eb"
      : analysis.overallScore >= 65
      ? "#d97706"
      : "#dc2626";

  return `
<div style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; max-width: 600px;">
  <div style="text-align: center; border-bottom: 2px solid #2563eb; padding-bottom: 15px; margin-bottom: 20px;">
    <h1 style="color: #1e40af; margin: 0; font-size: 24px;">Job Fit Analysis Report</h1>
    <p style="color: #6b7280; margin: 8px 0; font-size: 14px;">Generated: ${formatDate(
      analysis.generatedAt
    )}</p>
  </div>
  
  <div style="background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%); border: 1px solid #93c5fd; border-radius: 8px; padding: 15px; margin: 15px 0; text-align: center;">
    <div style="font-size: 36px; font-weight: bold; color: ${scoreColor}; margin: 8px 0;">${
    analysis.overallScore
  }%</div>
    <div style="font-size: 16px; font-weight: 600; color: #374151;">${
      analysis.scoreLabel
    }</div>
  </div>
  
  <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 12px; margin: 15px 0;">
    <div style="text-align: center; padding: 10px; background: #f9fafb; border-radius: 6px; border: 1px solid #e5e7eb;">
      <div style="font-size: 12px; font-weight: 600; color: #374151; margin-bottom: 4px;">Skills Match</div>
      <div style="font-size: 18px; font-weight: bold; color: #1f2937;">${
        analysis.matchDetails?.skillsMatch || 0
      }%</div>
    </div>
    <div style="text-align: center; padding: 10px; background: #f9fafb; border-radius: 6px; border: 1px solid #e5e7eb;">
      <div style="font-size: 12px; font-weight: 600; color: #374151; margin-bottom: 4px;">Experience Match</div>
      <div style="font-size: 18px; font-weight: bold; color: #1f2937;">${
        analysis.matchDetails?.experienceMatch || 0
      }%</div>
    </div>
    <div style="text-align: center; padding: 10px; background: #f9fafb; border-radius: 6px; border: 1px solid #e5e7eb;">
      <div style="font-size: 12px; font-weight: 600; color: #374151; margin-bottom: 4px;">Education Match</div>
      <div style="font-size: 18px; font-weight: bold; color: #1f2937;">${
        analysis.matchDetails?.educationMatch || 0
      }%</div>
    </div>
  </div>
  
  <div style="margin: 20px 0;">
    <h3 style="color: #1f2937; border-left: 4px solid #059669; padding-left: 12px; margin-bottom: 10px; font-size: 16px;">Your Strengths</h3>
    ${
      analysis.strengths?.length
        ? analysis.strengths
            .map(
              (strength) =>
                `<div style="background: #f9fafb; margin: 6px 0; padding: 8px 12px; border-radius: 4px; border-left: 3px solid #059669;">${strength}</div>`
            )
            .join("")
        : '<div style="background: #f9fafb; margin: 6px 0; padding: 8px 12px; border-radius: 4px; border-left: 3px solid #e5e7eb;">No strengths data available</div>'
    }
  </div>
  
  <div style="margin: 20px 0;">
    <h3 style="color: #1f2937; border-left: 4px solid #dc2626; padding-left: 12px; margin-bottom: 10px; font-size: 16px;">Areas to Address</h3>
    ${
      analysis.weaknesses?.length
        ? analysis.weaknesses
            .map(
              (weakness) =>
                `<div style="background: #f9fafb; margin: 6px 0; padding: 8px 12px; border-radius: 4px; border-left: 3px solid #dc2626;">${weakness}</div>`
            )
            .join("")
        : '<div style="background: #f9fafb; margin: 6px 0; padding: 8px 12px; border-radius: 4px; border-left: 3px solid #e5e7eb;">No areas for improvement data available</div>'
    }
  </div>
  
  <div style="margin: 20px 0;">
    <h3 style="color: #1f2937; border-left: 4px solid #2563eb; padding-left: 12px; margin-bottom: 10px; font-size: 16px;">Key Requirements</h3>
    ${
      analysis.keyRequirements?.length
        ? analysis.keyRequirements
            .map(
              (req) =>
                `<div style="background: #f9fafb; margin: 6px 0; padding: 8px 12px; border-radius: 4px; border-left: 3px solid #2563eb;">${req}</div>`
            )
            .join("")
        : '<div style="background: #f9fafb; margin: 6px 0; padding: 8px 12px; border-radius: 4px; border-left: 3px solid #e5e7eb;">No key requirements data available</div>'
    }
  </div>
  
  <div style="margin: 20px 0;">
    <h3 style="color: #1f2937; border-left: 4px solid #7c3aed; padding-left: 12px; margin-bottom: 10px; font-size: 16px;">Recommendations</h3>
    ${
      analysis.recommendations?.length
        ? analysis.recommendations
            .map(
              (rec) =>
                `<div style="background: #f9fafb; margin: 6px 0; padding: 8px 12px; border-radius: 4px; border-left: 3px solid #7c3aed;">${rec}</div>`
            )
            .join("")
        : '<div style="background: #f9fafb; margin: 6px 0; padding: 8px 12px; border-radius: 4px; border-left: 3px solid #e5e7eb;">No recommendations data available</div>'
    }
  </div>
  
  <div style="margin-top: 25px; padding-top: 15px; border-top: 1px solid #e5e7eb; text-align: center; color: #6b7280; font-size: 12px;">
    <p>This report was generated by AppTrack AI Coach</p>
  </div>
</div>`;
}

/**
 * Copies analysis data to clipboard with rich text formatting when supported
 */
export async function copyAnalysisToClipboard(
  analysis: JobFitAnalysisResult
): Promise<void> {
  // Try rich text format first if supported
  if (navigator.clipboard && navigator.clipboard.write) {
    try {
      const richTextHTML = formatAnalysisForRichText(analysis);
      const plainText = formatAnalysisForExport(analysis);

      const clipboardItem = new ClipboardItem({
        "text/html": new Blob([richTextHTML], { type: "text/html" }),
        "text/plain": new Blob([plainText], { type: "text/plain" }),
      });

      await navigator.clipboard.write([clipboardItem]);
      return;
    } catch (error) {
      // Fall back to plain text if rich text fails
        "Rich text clipboard failed, falling back to plain text:",
        error
      );
    }
  }

  // Fallback to plain text
  const formattedText = formatAnalysisForExport(analysis);

  if (!navigator.clipboard) {
    // Fallback for browsers without clipboard API
    const textArea = document.createElement("textarea");
    textArea.value = formattedText;
    textArea.style.position = "fixed";
    textArea.style.left = "-999999px";
    textArea.style.top = "-999999px";
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();

    try {
      const success = document.execCommand("copy");
      document.body.removeChild(textArea);
      if (!success) {
        throw new Error("Failed to copy to clipboard");
      }
    } catch (err) {
      document.body.removeChild(textArea);
      throw new Error("Failed to copy to clipboard");
    }
  } else {
    await navigator.clipboard.writeText(formattedText);
  }
}

/**
 * Generates and downloads a PDF document with the analysis results
 * Uses jsPDF to create a proper PDF file instead of HTML
 */
export async function downloadAnalysisPDF(
  analysis: JobFitAnalysisResult,
  applicationInfo?: { company: string; role: string }
): Promise<void> {
  try {
    // Create a new jsPDF instance
    const pdf = new jsPDF("p", "mm", "a4");
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    const contentWidth = pageWidth - 2 * margin;

    // Set up fonts and colors
    pdf.setFont("helvetica");

    // Helper function to add text with word wrapping
    const addWrappedText = (
      text: string,
      x: number,
      y: number,
      maxWidth: number,
      fontSize: number = 12,
      isBold: boolean = false
    ): number => {
      pdf.setFontSize(fontSize);
      pdf.setFont("helvetica", isBold ? "bold" : "normal");

      const lines = pdf.splitTextToSize(text, maxWidth);
      let currentY = y;

      lines.forEach((line: string) => {
        if (currentY > pageHeight - margin) {
          pdf.addPage();
          currentY = margin;
        }
        pdf.text(line, x, currentY);
        currentY += fontSize * 0.5; // Line height
      });

      return currentY + fontSize * 0.3; // Add some spacing after
    };

    // Helper function to format date
    const formatDate = (dateString: string) => {
      return new Date(dateString).toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      });
    };

    let currentY = margin;

    // Header
    pdf.setFillColor(37, 99, 235); // Blue background
    pdf.rect(0, 0, pageWidth, 40, "F");

    pdf.setTextColor(255, 255, 255); // White text
    pdf.setFontSize(24);
    pdf.setFont("helvetica", "bold");
    pdf.text("Job Fit Analysis Report", pageWidth / 2, 25, { align: "center" });

    currentY = 50;

    // Reset text color to black
    pdf.setTextColor(0, 0, 0);

    // Application info
    if (applicationInfo) {
      pdf.setFontSize(16);
      pdf.setFont("helvetica", "bold");
      pdf.text(
        `${applicationInfo.role} at ${applicationInfo.company}`,
        pageWidth / 2,
        currentY,
        { align: "center" }
      );
      currentY += 10;
    }

    // Generated date
    pdf.setFontSize(12);
    pdf.setFont("helvetica", "normal");
    pdf.text(
      `Generated on ${formatDate(analysis.generatedAt)}`,
      pageWidth / 2,
      currentY,
      { align: "center" }
    );
    currentY += 20;

    // Overall Score Section
    pdf.setFillColor(239, 246, 255); // Light blue background
    pdf.rect(margin, currentY - 5, contentWidth, 30, "F");
    pdf.setDrawColor(147, 197, 253); // Border color
    pdf.rect(margin, currentY - 5, contentWidth, 30, "S");

    pdf.setFontSize(36);
    pdf.setFont("helvetica", "bold");

    // Set score color based on value
    if (analysis.overallScore >= 85) pdf.setTextColor(5, 150, 105); // Green
    else if (analysis.overallScore >= 75) pdf.setTextColor(37, 99, 235); // Blue
    else if (analysis.overallScore >= 65)
      pdf.setTextColor(217, 119, 6); // Orange
    else pdf.setTextColor(220, 38, 38); // Red

    pdf.text(`${analysis.overallScore}%`, pageWidth / 2, currentY + 15, {
      align: "center",
    });

    pdf.setTextColor(0, 0, 0); // Reset to black
    pdf.setFontSize(16);
    pdf.setFont("helvetica", "bold");
    pdf.text(analysis.scoreLabel, pageWidth / 2, currentY + 25, {
      align: "center",
    });

    currentY += 40;

    // Match Breakdown
    if (analysis.matchDetails) {
      pdf.setFontSize(14);
      pdf.setFont("helvetica", "bold");
      pdf.text("Match Breakdown:", margin, currentY);
      currentY += 10;

      const breakdownData = [
        {
          label: "Skills Match",
          value: analysis.matchDetails.skillsMatch || 0,
        },
        {
          label: "Experience Match",
          value: analysis.matchDetails.experienceMatch || 0,
        },
        {
          label: "Education Match",
          value: analysis.matchDetails.educationMatch || 0,
        },
      ];

      const columnWidth = contentWidth / 3;

      breakdownData.forEach((item, index) => {
        const x = margin + index * columnWidth;

        // Background
        pdf.setFillColor(249, 250, 251);
        pdf.rect(x, currentY, columnWidth - 5, 20, "F");

        // Label
        pdf.setFontSize(10);
        pdf.setFont("helvetica", "bold");
        pdf.text(item.label.toUpperCase(), x + columnWidth / 2, currentY + 8, {
          align: "center",
        });

        // Value
        pdf.setFontSize(18);
        pdf.setFont("helvetica", "bold");
        pdf.text(`${item.value}%`, x + columnWidth / 2, currentY + 16, {
          align: "center",
        });
      });

      currentY += 30;
    }

    // Sections with data
    const sections = [
      {
        title: "Your Strengths",
        data: analysis.strengths,
        color: [5, 150, 105],
      },
      {
        title: "Areas to Address",
        data: analysis.weaknesses,
        color: [220, 38, 38],
      },
      {
        title: "Key Requirements",
        data: analysis.keyRequirements,
        color: [37, 99, 235],
      },
      {
        title: "Recommendations",
        data: analysis.recommendations,
        color: [124, 58, 237],
      },
    ];

    sections.forEach((section) => {
      if (currentY > pageHeight - 60) {
        pdf.addPage();
        currentY = margin;
      }

      // Section title
      pdf.setFontSize(16);
      pdf.setFont("helvetica", "bold");
      pdf.setTextColor(section.color[0], section.color[1], section.color[2]);

      // Add colored line
      pdf.setDrawColor(section.color[0], section.color[1], section.color[2]);
      pdf.setLineWidth(3);
      pdf.line(margin, currentY + 2, margin + 10, currentY + 2);

      pdf.text(section.title, margin + 15, currentY + 5);
      currentY += 15;

      // Reset color
      pdf.setTextColor(0, 0, 0);
      pdf.setDrawColor(0, 0, 0);
      pdf.setLineWidth(0.1);

      // Section items
      if (section.data && section.data.length > 0) {
        section.data.forEach((item) => {
          if (currentY > pageHeight - 30) {
            pdf.addPage();
            currentY = margin;
          }

          const itemText = typeof item === "string" ? item : String(item);
          const itemHeight = Math.max(
            15,
            pdf.splitTextToSize(itemText, contentWidth - 20).length * 6
          );

          // Item background
          pdf.setFillColor(249, 250, 251);
          pdf.rect(margin, currentY - 3, contentWidth, itemHeight, "F");

          // Add colored left border
          pdf.setFillColor(
            section.color[0],
            section.color[1],
            section.color[2]
          );
          pdf.rect(margin, currentY - 3, 3, itemHeight, "F");

          // Item text
          pdf.setFontSize(11);
          pdf.setFont("helvetica", "normal");
          currentY = addWrappedText(
            itemText,
            margin + 10,
            currentY + 5,
            contentWidth - 20,
            11
          );
          currentY += 5;
        });
      } else {
        if (currentY > pageHeight - 30) {
          pdf.addPage();
          currentY = margin;
        }

        pdf.setFontSize(11);
        pdf.setFont("helvetica", "italic");
        pdf.setTextColor(107, 114, 128);
        pdf.text("No data available", margin + 10, currentY);
        pdf.setTextColor(0, 0, 0);
        currentY += 15;
      }

      currentY += 10;
    });

    // Footer
    if (currentY > pageHeight - 40) {
      pdf.addPage();
      currentY = margin;
    }

    pdf.setDrawColor(229, 231, 235);
    pdf.line(margin, currentY, pageWidth - margin, currentY);
    currentY += 10;

    pdf.setFontSize(10);
    pdf.setFont("helvetica", "bold");
    pdf.text(
      "This report was generated by AppTrack AI Coach",
      pageWidth / 2,
      currentY,
      { align: "center" }
    );
    currentY += 6;

    pdf.setFont("helvetica", "normal");
    pdf.text(
      "For the most up-to-date analysis, visit your AppTrack dashboard",
      pageWidth / 2,
      currentY,
      { align: "center" }
    );
    currentY += 6;

    pdf.text(
      `Report generated on ${new Date().toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      })}`,
      pageWidth / 2,
      currentY,
      { align: "center" }
    );

    // Generate filename
    const filename = applicationInfo
      ? `job-fit-analysis-${applicationInfo.company
          .replace(/[^a-zA-Z0-9]/g, "-")
          .toLowerCase()}-${applicationInfo.role
          .replace(/[^a-zA-Z0-9]/g, "-")
          .toLowerCase()}.pdf`
      : `job-fit-analysis-${new Date().toISOString().split("T")[0]}.pdf`;

    // Save the PDF
    pdf.save(filename);
  } catch (error) {
    throw new Error("Failed to generate PDF report. Please try again.");
  }
}

/**
 * Generates print-optimized HTML with professional styling
 */
function generatePrintOptimizedHTML(
  analysis: JobFitAnalysisResult,
  applicationInfo?: { company: string; role: string }
): string {
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const scoreColor =
    analysis.overallScore >= 85
      ? "#059669"
      : analysis.overallScore >= 75
      ? "#2563eb"
      : analysis.overallScore >= 65
      ? "#d97706"
      : "#dc2626";

  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Job Fit Analysis Report</title>
    <style>
        /* Print-optimized styling */
        @page {
            size: A4;
            margin: 0.75in;
        }
        
        * {
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            color: #1f2937;
            margin: 0;
            padding: 20px;
            background: white;
            font-size: 14px;
        }
        
        .container {
            max-width: 8.5in;
            margin: 0 auto;
            background: white;
        }
        
        .header {
            text-align: center;
            border-bottom: 3px solid #2563eb;
            padding-bottom: 20px;
            margin-bottom: 30px;
            page-break-after: avoid;
        }
        
        .header h1 {
            color: #1e40af;
            margin: 0 0 15px 0;
            font-size: 32px;
            font-weight: 700;
            letter-spacing: -0.5px;
        }
        
        .header .subtitle {
            color: #6b7280;
            margin: 8px 0;
            font-size: 16px;
            font-weight: 500;
        }
        
        .header .company-info {
            color: #374151;
            font-size: 18px;
            font-weight: 600;
            margin: 10px 0;
        }
        
        .score-section {
            background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);
            border: 2px solid #93c5fd;
            border-radius: 12px;
            padding: 30px;
            margin: 30px 0;
            text-align: center;
            page-break-inside: avoid;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .score {
            font-size: 64px;
            font-weight: 900;
            color: ${scoreColor};
            margin: 10px 0;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            line-height: 1;
        }
        
        .score-label {
            font-size: 24px;
            font-weight: 600;
            color: #374151;
            margin-top: 10px;
        }
        
        .match-breakdown {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin: 30px 0;
            page-break-inside: avoid;
        }
        
        .match-item {
            text-align: center;
            padding: 20px 15px;
            background: #f9fafb;
            border-radius: 10px;
            border: 1px solid #e5e7eb;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        
        .match-item h4 {
            margin: 0 0 12px 0;
            color: #374151;
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .match-item .percentage {
            font-size: 28px;
            font-weight: 800;
            color: #1f2937;
            line-height: 1;
        }
        
        .section {
            margin: 40px 0;
            page-break-inside: avoid;
        }
        
        .section h3 {
            color: #1f2937;
            border-left: 5px solid #2563eb;
            padding: 12px 0 12px 20px;
            margin: 0 0 20px 0;
            font-size: 20px;
            font-weight: 700;
            page-break-after: avoid;
            background: #f8fafc;
            border-radius: 0 8px 8px 0;
        }
        
        .section.strengths h3 { 
            border-left-color: #059669; 
            background: #f0fdf4;
        }
        .section.weaknesses h3 { 
            border-left-color: #dc2626; 
            background: #fef2f2;
        }
        .section.requirements h3 { 
            border-left-color: #2563eb; 
            background: #eff6ff;
        }
        .section.recommendations h3 { 
            border-left-color: #7c3aed; 
            background: #faf5ff;
        }
        
        .list-item {
            background: #f9fafb;
            margin: 10px 0;
            padding: 15px 20px;
            border-radius: 8px;
            border-left: 4px solid #e5e7eb;
            font-size: 15px;
            line-height: 1.6;
            break-inside: avoid;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }
        
        .list-item.strength { 
            border-left-color: #059669; 
            background: #f0fdf4; 
        }
        .list-item.weakness { 
            border-left-color: #dc2626; 
            background: #fef2f2; 
        }
        .list-item.requirement { 
            border-left-color: #2563eb; 
            background: #eff6ff; 
        }
        .list-item.recommendation { 
            border-left-color: #7c3aed; 
            background: #faf5ff; 
        }
        
        .footer {
            margin-top: 60px;
            padding-top: 30px;
            border-top: 2px solid #e5e7eb;
            text-align: center;
            color: #6b7280;
            font-size: 12px;
            page-break-inside: avoid;
        }
        
        .footer p {
            margin: 8px 0;
            line-height: 1.4;
        }
        
        .print-instructions {
            background: #fef3c7;
            border: 2px solid #f59e0b;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            text-align: center;
            font-weight: 600;
            color: #92400e;
        }
        
        @media print {
            body { 
                margin: 0; 
                padding: 0;
                font-size: 12px;
            }
            
            .container {
                max-width: none;
                padding: 0;
            }
            
            .print-instructions {
                display: none;
            }
            
            .header { 
                page-break-after: avoid; 
            }
            
            .section { 
                page-break-inside: avoid; 
                margin: 25px 0;
            }
            
            .score-section {
                page-break-inside: avoid;
                margin: 20px 0;
            }
            
            .match-breakdown {
                page-break-inside: avoid;
                margin: 20px 0;
            }
            
            .score {
                font-size: 48px;
            }
            
            .score-label {
                font-size: 18px;
            }
        }
        
        @media screen {
            body {
                background: #f3f4f6;
                padding: 40px 20px;
            }
            
            .container {
                background: white;
                padding: 40px;
                border-radius: 12px;
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="print-instructions">
            📄 To save as PDF: Press Ctrl+P (or Cmd+P on Mac) → Choose "Save as PDF" → Click Save
        </div>
        
        <div class="header">
            <h1>Job Fit Analysis Report</h1>
            ${
              applicationInfo
                ? `<div class="company-info">${applicationInfo.role} at ${applicationInfo.company}</div>`
                : ""
            }
            <div class="subtitle">Generated on ${formatDate(
              analysis.generatedAt
            )}</div>
        </div>
        
        <div class="score-section">
            <div class="score">${analysis.overallScore}%</div>
            <div class="score-label">${analysis.scoreLabel}</div>
        </div>
        
        <div class="match-breakdown">
            <div class="match-item">
                <h4>Skills Match</h4>
                <div class="percentage">${
                  analysis.matchDetails?.skillsMatch || 0
                }%</div>
            </div>
            <div class="match-item">
                <h4>Experience Match</h4>
                <div class="percentage">${
                  analysis.matchDetails?.experienceMatch || 0
                }%</div>
            </div>
            <div class="match-item">
                <h4>Education Match</h4>
                <div class="percentage">${
                  analysis.matchDetails?.educationMatch || 0
                }%</div>
            </div>
        </div>
        
        <div class="section strengths">
            <h3>Your Strengths</h3>
            ${
              analysis.strengths?.length
                ? analysis.strengths
                    .map(
                      (strength) =>
                        `<div class="list-item strength">${strength}</div>`
                    )
                    .join("")
                : '<div class="list-item">No strengths data available</div>'
            }
        </div>
        
        <div class="section weaknesses">
            <h3>Areas to Address</h3>
            ${
              analysis.weaknesses?.length
                ? analysis.weaknesses
                    .map(
                      (weakness) =>
                        `<div class="list-item weakness">${weakness}</div>`
                    )
                    .join("")
                : '<div class="list-item">No areas for improvement data available</div>'
            }
        </div>
        
        <div class="section requirements">
            <h3>Key Requirements</h3>
            ${
              analysis.keyRequirements?.length
                ? analysis.keyRequirements
                    .map(
                      (req) => `<div class="list-item requirement">${req}</div>`
                    )
                    .join("")
                : '<div class="list-item">No key requirements data available</div>'
            }
        </div>
        
        <div class="section recommendations">
            <h3>Recommendations</h3>
            ${
              analysis.recommendations?.length
                ? analysis.recommendations
                    .map(
                      (rec) =>
                        `<div class="list-item recommendation">${rec}</div>`
                    )
                    .join("")
                : '<div class="list-item">No recommendations data available</div>'
            }
        </div>
        
        <div class="footer">
            <p><strong>This report was generated by AppTrack AI Coach</strong></p>
            <p>For the most up-to-date analysis, visit your AppTrack dashboard</p>
            <p>Report generated on ${new Date().toLocaleDateString("en-US", {
              year: "numeric",
              month: "long",
              day: "numeric",
              hour: "2-digit",
              minute: "2-digit",
            })}</p>
        </div>
    </div>
</body>
</html>`;
}

/**
 * Fallback: Downloads HTML file (original implementation)
 */
async function downloadAnalysisHTML(
  analysis: JobFitAnalysisResult,
  applicationInfo?: { company: string; role: string }
): Promise<void> {
  // Create a comprehensive HTML report that can be easily printed to PDF

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Job Fit Analysis Report</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            text-align: center;
            border-bottom: 3px solid #2563eb;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .header h1 {
            color: #1e40af;
            margin: 0;
            font-size: 28px;
        }
        .header .subtitle {
            color: #6b7280;
            margin: 10px 0;
        }
        .score-section {
            background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);
            border: 1px solid #93c5fd;
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
            text-align: center;
        }
        .score {
            font-size: 48px;
            font-weight: bold;
            color: ${
              analysis.overallScore >= 85
                ? "#059669"
                : analysis.overallScore >= 75
                ? "#2563eb"
                : analysis.overallScore >= 65
                ? "#d97706"
                : "#dc2626"
            };
            margin: 10px 0;
        }
        .score-label {
            font-size: 18px;
            font-weight: 600;
            color: #374151;
        }
        .match-breakdown {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin: 20px 0;
        }
        .match-item {
            text-align: center;
            padding: 15px;
            background: #f9fafb;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
        }
        .match-item h4 {
            margin: 0 0 8px 0;
            color: #374151;
            font-size: 14px;
            font-weight: 600;
        }
        .match-item .percentage {
            font-size: 20px;
            font-weight: bold;
            color: #1f2937;
        }
        .section {
            margin: 30px 0;
        }
        .section h3 {
            color: #1f2937;
            border-left: 4px solid #2563eb;
            padding-left: 15px;
            margin-bottom: 15px;
            font-size: 18px;
        }
        .section.strengths h3 { border-left-color: #059669; }
        .section.weaknesses h3 { border-left-color: #dc2626; }
        .section.requirements h3 { border-left-color: #2563eb; }
        .section.recommendations h3 { border-left-color: #7c3aed; }
        .list-item {
            background: #f9fafb;
            margin: 8px 0;
            padding: 12px 15px;
            border-radius: 6px;
            border-left: 3px solid #e5e7eb;
        }
        .list-item.strength { border-left-color: #059669; }
        .list-item.weakness { border-left-color: #dc2626; }
        .list-item.requirement { border-left-color: #2563eb; }
        .list-item.recommendation { border-left-color: #7c3aed; }
        .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
            text-align: center;
            color: #6b7280;
            font-size: 14px;
        }
        @media print {
            body { margin: 0; padding: 15px; }
            .header { page-break-after: avoid; }
            .section { page-break-inside: avoid; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Job Fit Analysis Report</h1>
        ${
          applicationInfo
            ? `<div class="subtitle">${applicationInfo.role} at ${applicationInfo.company}</div>`
            : ""
        }
        <div class="subtitle">Generated on ${formatDate(
          analysis.generatedAt
        )}</div>
    </div>
    
    <div class="score-section">
        <div class="score">${analysis.overallScore}%</div>
        <div class="score-label">${analysis.scoreLabel}</div>
    </div>
    
    <div class="match-breakdown">
        <div class="match-item">
            <h4>Skills Match</h4>
            <div class="percentage">${
              analysis.matchDetails?.skillsMatch || 0
            }%</div>
        </div>
        <div class="match-item">
            <h4>Experience Match</h4>
            <div class="percentage">${
              analysis.matchDetails?.experienceMatch || 0
            }%</div>
        </div>
        <div class="match-item">
            <h4>Education Match</h4>
            <div class="percentage">${
              analysis.matchDetails?.educationMatch || 0
            }%</div>
        </div>
    </div>
    
    <div class="section strengths">
        <h3>Your Strengths</h3>
        ${
          analysis.strengths?.length
            ? analysis.strengths
                .map(
                  (strength) =>
                    `<div class="list-item strength">${strength}</div>`
                )
                .join("")
            : '<div class="list-item">No strengths data available</div>'
        }
    </div>
    
    <div class="section weaknesses">
        <h3>Areas to Address</h3>
        ${
          analysis.weaknesses?.length
            ? analysis.weaknesses
                .map(
                  (weakness) =>
                    `<div class="list-item weakness">${weakness}</div>`
                )
                .join("")
            : '<div class="list-item">No areas for improvement data available</div>'
        }
    </div>
    
    <div class="section requirements">
        <h3>Key Requirements</h3>
        ${
          analysis.keyRequirements?.length
            ? analysis.keyRequirements
                .map((req) => `<div class="list-item requirement">${req}</div>`)
                .join("")
            : '<div class="list-item">No key requirements data available</div>'
        }
    </div>
    
    <div class="section recommendations">
        <h3>Recommendations</h3>
        ${
          analysis.recommendations?.length
            ? analysis.recommendations
                .map(
                  (rec) => `<div class="list-item recommendation">${rec}</div>`
                )
                .join("")
            : '<div class="list-item">No recommendations data available</div>'
        }
    </div>
    
    <div class="footer">
        <p>This report was generated by AppTrack AI Coach</p>
        <p>For the most up-to-date analysis, visit your AppTrack dashboard</p>
    </div>
</body>
</html>`;

  try {
    // Create a blob with the HTML content
    const blob = new Blob([htmlContent], { type: "text/html" });
    const url = URL.createObjectURL(blob);

    // Create a temporary link to download the file
    const link = document.createElement("a");
    link.href = url;

    const fileName = applicationInfo
      ? `job-fit-analysis-${applicationInfo.company
          .replace(/\s+/g, "-")
          .toLowerCase()}-${applicationInfo.role
          .replace(/\s+/g, "-")
          .toLowerCase()}.html`
      : `job-fit-analysis-${new Date().toISOString().split("T")[0]}.html`;

    link.download = fileName;
    link.style.display = "none";

    // Trigger download
    document.body.appendChild(link);

    // Add a small delay to ensure the link is in the DOM
    await new Promise((resolve) => setTimeout(resolve, 10));

    link.click();

    // Clean up after a brief delay
    setTimeout(() => {
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    }, 100);
  } catch (error) {
    throw new Error("Failed to download analysis report. Please try again.");
  }
}

/**
 * Checks if the browser supports the Clipboard API
 */
export function isClipboardSupported(): boolean {
  return !!navigator.clipboard || document.queryCommandSupported?.("copy");
}

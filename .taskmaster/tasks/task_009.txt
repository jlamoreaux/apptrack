# Task ID: 9
# Title: Create AI Coach Dashboard
# Status: pending
# Dependencies: 5, 6, 7, 8
# Priority: medium
# Description: Build a comprehensive AI Coach dashboard that integrates all AI features into a single, intuitive interface.
# Details:
Design and implement a central AI Coach dashboard that provides access to all AI features:

1. Create a dedicated AI Coach dashboard page
2. Implement cards/sections for each AI feature
3. Add quick access to recently used features
4. Display subscription status and usage statistics
5. Implement onboarding for new AI Coach subscribers

```typescript
// pages/ai-coach/index.tsx
import { useState, useEffect } from 'react'
import { useUser } from '@/lib/auth'
import { useSubscription } from '@/lib/subscription'
import { supabase } from '@/lib/supabase'
import Link from 'next/link'

export default function AICoachDashboard() {
  const { user } = useUser()
  const { subscription, isLoading: subLoading } = useSubscription(user?.id)
  const [recentActivity, setRecentActivity] = useState([])
  const [isLoading, setIsLoading] = useState(true)
  const [hasResume, setHasResume] = useState(false)
  
  const hasAIAccess = subscription?.plan === 'ai_coach'
  
  // AI Coach features configuration
  const features = [
    {
      id: 'resume',
      title: 'Resume Analysis',
      description: 'Get AI-powered feedback on your resume with specific improvement suggestions.',
      icon: 'document',
      href: '/ai-coach/resume',
      color: 'blue'
    },
    {
      id: 'interview',
      title: 'Interview Preparation',
      description: 'Practice with AI-generated questions tailored to specific roles and job descriptions.',
      icon: 'microphone',
      href: '/ai-coach/interview',
      color: 'purple'
    },
    {
      id: 'cover-letter',
      title: 'Cover Letter Generator',
      description: 'Create customized cover letters based on job descriptions and your background.',
      icon: 'mail',
      href: '/ai-coach/cover-letter',
      color: 'green'
    },
    {
      id: 'advice',
      title: 'Career Advice',
      description: 'Chat with an AI career coach for personalized guidance and strategy.',
      icon: 'chat',
      href: '/ai-coach/advice',
      color: 'orange'
    },
    {
      id: 'job-fit',
      title: 'Job Fit Analysis',
      description: 'Analyze how well your profile matches specific job requirements.',
      icon: 'chart',
      href: '/ai-coach/job-fit',
      color: 'indigo'
    }
  ]
  
  // Fetch user's recent AI activity and resume status
  useEffect(() => {
    async function fetchData() {
      if (!user || !hasAIAccess) return
      
      setIsLoading(true)
      
      // Check if user has uploaded resume
      const { data: resumeData } = await supabase
        .from('user_resumes')
        .select('id')
        .eq('user_id', user.id)
        .limit(1)
      
      setHasResume(resumeData && resumeData.length > 0)
      
      // Fetch recent AI activity
      const { data: activityData } = await supabase
        .from('ai_activity_view')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false })
        .limit(5)
      
      if (activityData) {
        setRecentActivity(activityData)
      }
      
      setIsLoading(false)
    }
    
    fetchData()
  }, [user, hasAIAccess])
  
  // If not subscribed to AI Coach, show upgrade page
  if (!subLoading && !hasAIAccess) {
    return (
      <div className="max-w-4xl mx-auto py-8">
        <h1 className="text-2xl font-bold mb-6">AI Coach Features</h1>
        
        <div className="bg-white rounded-lg shadow overflow-hidden">
          <div className="p-6 text-center">
            <h2 className="text-xl font-semibold mb-4">Upgrade to AI Coach</h2>
            <p className="text-gray-600 mb-6">
              Get access to AI-powered career guidance, resume analysis, interview preparation, 
              and more with an AI Coach subscription.
            </p>
            
            <div className="bg-indigo-50 p-4 rounded-lg mb-6">
              <h3 className="font-medium text-indigo-800 mb-2">AI Coach Features:</h3>
              <ul className="text-left text-sm text-indigo-700 space-y-1">
                <li>• AI-powered resume review with specific improvement suggestions</li>
                <li>• Interview preparation with tailored practice questions</li>
                <li>• Automated cover letter creation based on job descriptions</li>
                <li>• Conversational AI coach for personalized career guidance</li>
                <li>• Job fit analysis to assess match with job requirements</li>
              </ul>
            </div>
            
            <Button
              variant="primary"
              size="lg"
              href="/subscription/upgrade"
            >
              Upgrade to AI Coach - $9/month
            </Button>
            <p className="text-sm text-gray-500 mt-2">Or $90/year (save 16%)</p>
          </div>
        </div>
      </div>
    )
  }
  
  return (
    <div className="max-w-4xl mx-auto py-8">
      <h1 className="text-2xl font-bold mb-6">AI Coach Dashboard</h1>
      
      {/* Resume upload reminder if needed */}
      {!isLoading && !hasResume && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
          <h3 className="font-medium text-yellow-800 mb-1">Upload Your Resume</h3>
          <p className="text-sm text-yellow-700 mb-3">
            For the best experience with AI Coach features, please upload your resume first.
          </p>
          <Button
            variant="secondary"
            size="sm"
            href="/ai-coach/resume"
          >
            Upload Resume
          </Button>
        </div>
      )}
      
      {/* AI Features Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
        {features.map(feature => (
          <Link 
            key={feature.id}
            href={feature.href}
            className={`bg-white border border-gray-200 rounded-lg p-5 hover:shadow-md transition-shadow flex`}
          >
            <div className={`w-12 h-12 rounded-full bg-${feature.color}-100 flex items-center justify-center mr-4 flex-shrink-0`}>
              <Icon name={feature.icon} className={`w-6 h-6 text-${feature.color}-600`} />
            </div>
            <div>
              <h3 className="font-medium text-gray-900 mb-1">{feature.title}</h3>
              <p className="text-sm text-gray-600">{feature.description}</p>
            </div>
          </Link>
        ))}
      </div>
      
      {/* Recent Activity */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <h2 className="text-lg font-medium text-gray-900 mb-4">Recent AI Coach Activity</h2>
        
        {isLoading ? (
          <div className="animate-pulse space-y-3">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="h-12 bg-gray-100 rounded"></div>
            ))}
          </div>
        ) : recentActivity.length > 0 ? (
          <div className="space-y-3">
            {recentActivity.map(activity => (
              <div key={activity.id} className="border-b border-gray-100 pb-3 last:border-0 last:pb-0">
                <div className="flex justify-between">
                  <div>
                    <span className="font-medium text-gray-900">{activity.feature_name}</span>
                    <p className="text-sm text-gray-600">{activity.description}</p>
                  </div>
                  <span className="text-xs text-gray-500">
                    {formatRelativeTime(activity.created_at)}
                  </span>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-500 text-center py-4">
            No recent activity. Start using AI Coach features to see your history here.
          </p>
        )}
      </div>
    </div>
  )
}

// Helper function to format relative time
function formatRelativeTime(dateString) {
  const date = new Date(dateString)
  const now = new Date()
  const diffMs = now - date
  const diffSecs = Math.floor(diffMs / 1000)
  const diffMins = Math.floor(diffSecs / 60)
  const diffHours = Math.floor(diffMins / 60)
  const diffDays = Math.floor(diffHours / 24)
  
  if (diffSecs < 60) return 'just now'
  if (diffMins < 60) return `${diffMins}m ago`
  if (diffHours < 24) return `${diffHours}h ago`
  if (diffDays < 30) return `${diffDays}d ago`
  
  return date.toLocaleDateString()
}

# Test Strategy:
1. Unit test the AI Coach Dashboard component
2. Test subscription status checking and upgrade flow
3. Verify resume status detection
4. Test recent activity fetching and display
5. Verify all feature links work correctly
6. Test responsive layout on different screen sizes
7. Test with and without subscription to verify correct display
8. End-to-end test of navigation to individual AI features
9. Test with various user states (new user, active user, etc.)

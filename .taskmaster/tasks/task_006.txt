# Task ID: 6
# Title: Implement Cover Letter Generator
# Status: done
# Dependencies: 5
# Priority: medium
# Description: Complete the implementation of the Cover Letter Generator feature that creates tailored cover letters based on job descriptions and user background.
# Details:
Build a comprehensive Cover Letter Generator feature that leverages AI to create personalized cover letters:

1. Create a dedicated Cover Letter Generator page
2. Implement form for job description and user background input
3. Integrate with Replicate API for AI generation
4. Add formatting options and download capabilities
5. Store generated cover letters in the database for future reference

```typescript
// pages/ai-coach/cover-letter.tsx
import { useState } from 'react'
import { useUser } from '@/lib/auth'
import { supabase } from '@/lib/supabase'

export default function CoverLetterGenerator() {
  const { user } = useUser()
  const [jobDescription, setJobDescription] = useState('')
  const [userBackground, setUserBackground] = useState('')
  const [isGenerating, setIsGenerating] = useState(false)
  const [coverLetter, setCoverLetter] = useState(null)
  const [selectedApplication, setSelectedApplication] = useState(null)
  const [applications, setApplications] = useState([])
  
  // Fetch user's applications for selection
  useEffect(() => {
    async function fetchApplications() {
      if (!user) return
      
      const { data, error } = await supabase
        .from('applications')
        .select('id, company_name, role_title')
        .order('updated_at', { ascending: false })
      
      if (!error && data) {
        setApplications(data)
      }
    }
    
    fetchApplications()
  }, [user])
  
  async function generateCoverLetter() {
    setIsGenerating(true)
    
    try {
      // Prepare data for AI generation
      const generationData = {
        jobDescription,
        userBackground,
        applicationId: selectedApplication?.id
      }
      
      // Call API endpoint
      const response = await fetch('/api/ai/cover-letter', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(generationData)
      })
      
      if (!response.ok) throw new Error('Failed to generate cover letter')
      
      const data = await response.json()
      setCoverLetter(data.coverLetter)
      
      // Save to database
      if (selectedApplication) {
        await supabase
          .from('cover_letters')
          .insert({
            user_id: user.id,
            application_id: selectedApplication.id,
            content: data.coverLetter,
            job_description: jobDescription,
            user_background: userBackground
          })
      }
    } catch (error) {
      console.error('Error generating cover letter:', error)
      // Show error toast
    } finally {
      setIsGenerating(false)
    }
  }
  
  function handleDownload() {
    // Create downloadable text file
    const element = document.createElement('a')
    const file = new Blob([coverLetter], { type: 'text/plain' })
    element.href = URL.createObjectURL(file)
    element.download = `Cover_Letter_${selectedApplication?.company_name || 'Custom'}.txt`
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)
  }
  
  return (
    <div className="max-w-4xl mx-auto py-8">
      <h1 className="text-2xl font-bold mb-6">AI Cover Letter Generator</h1>
      
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="p-6">
          {!coverLetter ? (
            <form onSubmit={(e) => {
              e.preventDefault()
              generateCoverLetter()
            }}>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Select Application (Optional)
                </label>
                <select
                  className="w-full border-gray-300 rounded-md shadow-sm"
                  value={selectedApplication?.id || ''}
                  onChange={(e) => {
                    const appId = e.target.value
                    const app = applications.find(a => a.id === appId)
                    setSelectedApplication(app || null)
                  }}
                >
                  <option value="">Custom Cover Letter</option>
                  {applications.map(app => (
                    <option key={app.id} value={app.id}>
                      {app.company_name} - {app.role_title}
                    </option>
                  ))}
                </select>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Job Description
                </label>
                <textarea
                  className="w-full border-gray-300 rounded-md shadow-sm"
                  rows={6}
                  value={jobDescription}
                  onChange={(e) => setJobDescription(e.target.value)}
                  placeholder="Paste the job description here..."
                  required
                />
              </div>
              
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Your Background & Qualifications
                </label>
                <textarea
                  className="w-full border-gray-300 rounded-md shadow-sm"
                  rows={6}
                  value={userBackground}
                  onChange={(e) => setUserBackground(e.target.value)}
                  placeholder="Describe your relevant experience, skills, and qualifications..."
                  required
                />
              </div>
              
              <Button
                type="submit"
                variant="primary"
                className="w-full"
                disabled={isGenerating}
              >
                {isGenerating ? 'Generating Cover Letter...' : 'Generate Cover Letter'}
              </Button>
            </form>
          ) : (
            <div>
              <div className="prose max-w-none mb-6">
                <h3>Your Generated Cover Letter</h3>
                <div className="p-4 border rounded whitespace-pre-wrap font-serif">
                  {coverLetter}
                </div>
              </div>
              
              <div className="flex justify-end space-x-3">
                <Button
                  variant="outline"
                  onClick={() => setCoverLetter(null)}
                >
                  Edit Inputs
                </Button>
                <Button
                  variant="primary"
                  onClick={handleDownload}
                >
                  Download as Text
                </Button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

# Test Strategy:
1. Unit test the Cover Letter Generator component
2. Test form validation and submission
3. Mock API responses for AI generation
4. Test error handling for API failures
5. Verify database storage of generated cover letters
6. Test download functionality
7. Verify integration with application selection
8. End-to-end test with real Replicate API integration
9. Test with various job descriptions and user backgrounds
